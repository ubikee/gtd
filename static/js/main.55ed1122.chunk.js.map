{"version":3,"sources":["AppAPI.js","AppContext.js","pages/inbox/dialogs/CaptureDialog.js","pages/inbox/editor.js","pages/inbox/page.js","pages/login/page.js","App.js","serviceWorker.js","index.js"],"names":["HTTPClient","process","REACT_APP_API","Session","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","API","collection","login","email","password","onOK","auth","onAuthStateChanged","user","signInWithEmailAndPassword","init","this","firestore","tasks","get","then","snapshot","docs","map","doc","Object","assign","data","id","task","addTask","form","add","updateTask","update","console","log","deleteTask","delete","AppContext","React","createContext","AppContextProvider","children","useState","logged","setLogged","setTasks","setTask","a","loadTasks","response","state","created","Date","toDateString","value","selectTask","createTask","Provider","CaptureDialog","site","useContext","SiteContext","setForm","isValid","setValid","actions","action","isDefaultAction","raised","disabled","title","open","onAction","closeDialog","columns","outlined","onChange","validation","span","label","required","TaskEditor","context","useEffect","className","changes","description","Page","confirm","rows","filter","icon","clickable","remove","use","openDialog","onRowSelection","row","pwd","setEmail","setPassword","goto","AppSite","min","section","layout","landingPage","App","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55ed1122.chunk.js","sourcesContent":["import { HTTPClient, Session } from 'ywana-core6'\nimport firebase from 'firebase'\n\nconst http = HTTPClient(process.env.REACT_APP_API, Session);\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBKZERFFQxaw3wQJxkGltdgMEvQtrYOKJU\",\n    authDomain: \"tasks-35737.firebaseapp.com\",\n    databaseURL: \"https://tasks-35737.firebaseio.com\",\n    projectId: \"tasks-35737\",\n    storageBucket: \"tasks-35737.appspot.com\",\n    messagingSenderId: \"743247988916\",\n    appId: \"1:743247988916:web:3d6f934f5f412d31a06fe1\"\n}\n\nfirebase.initializeApp(firebaseConfig);\n\n/**\n * API\n */\nconst API = {\n\n    collection: null,\n\n    login(email, password, onOK) {\n        firebase.auth().onAuthStateChanged(user => { if (user) onOK(user) })\n        firebase.auth().signInWithEmailAndPassword(email, password)\n    },\n\n    init() {\n        this.collection = firebase.firestore().collection('tasks')\n    },\n\n    async tasks() {\n        return await this.collection.get().then(snapshot => {\n            return snapshot.docs.map(doc => Object.assign({}, doc.data(), { id: doc.id}))\n        })\n    },\n\n    async task(id) {\n        return await this.collection.doc(id).get().then(doc => {\n            return Object.assign({}, doc.data(), { id: doc.id})\n        })\n    },\n\n    async addTask(form) {\n        return await this.collection.add(form)\n    },\n\n    async updateTask(id, form) {\n        return await this.collection.doc(id).update(form).then(doc => {\n            console.log('updated', id)\n        })\n    },\n\n    async deleteTask(id) {\n        return await this.collection.doc(id).delete().then(doc => {\n            console.log('deleted', id)\n        })\n    }\n\n}\n\nexport default API\n","import React, { useState } from 'react'\nimport API from './AppAPI'\n\nexport const AppContext = React.createContext()\nexport const AppContextProvider = ({ children }) => {\n\n    const [logged, setLogged] = useState(false)\n    const [tasks, setTasks] = useState([])\n    const [task, setTask] = useState()\n    \n    async function login(email, password) {\n        const onOK = () => {\n            API.init()\n            setLogged(true)\n        }\n        API.login(email, password, onOK)\n    }\n\n    async function loadTasks() {\n        const tasks = await API.tasks()\n        setTasks(tasks)\n    }\n\n    async function selectTask(id) {\n        const response = await API.task(id)\n        setTask(response)\n    }\n\n    async function createTask(form) {\n        form.state = 'INBOX'\n        form.created = new Date().toDateString()\n        await API.addTask(form)\n        loadTasks()\n    }\n\n    async function updateTask(id, form) {\n        console.log('update', id, form)\n        await API.updateTask(id, form)\n        loadTasks()\n    }\n\n    async function deleteTask(id) {\n        await API.deleteTask(id)\n        loadTasks()\n    }\n\n    const value = {\n        logged,\n        login,\n\n        tasks,\n        task,\n        loadTasks,\n        selectTask,\n        createTask,\n        updateTask,\n        deleteTask,\n    }\n\n    return (\n        <AppContext.Provider value={value}>{children}</AppContext.Provider>\n    )\n}","import React, { Fragment, useContext, useState } from 'react'\nimport { Dialog, DialogButton, TextField, SiteContext, Form } from 'ywana-core6'\n\n/**\n *  Capture Dialog\n */\nexport const CaptureDialog = ({ onOK }) => {\n\n    const site = useContext(SiteContext)\n    const [form, setForm] = useState()\n    const [isValid, setValid] = useState(false)\n    \n    const onAction = (action) => {\n        if (action === 'OK' && onOK ) onOK(form) \n        site.closeDialog()\n    }\n\n    const onChange = (form, validation) => {\n        setForm(form)\n        setValid(validation)\n    }\n\n    const actions = (\n        <Fragment>\n            <DialogButton action=\"CLOSE\">Cancel</DialogButton>\n            <DialogButton action=\"OK\" isDefaultAction raised disabled={!isValid}>OK</DialogButton>\n        </Fragment>\n    )\n\n    return (\n        <Dialog title=\"Captura\" open={true} onAction={onAction} actions={actions}>\n            <br/>\n            <Form columns={1} outlined onChange={onChange}>\n                <TextField span=\"1\" id=\"description\" label=\"¿ Qué quieres hacer ?\" required />\n                \n            </Form>\n        </Dialog>\n    )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Button, Form, TextField } from 'ywana-core6'\nimport { AppContext } from '../../AppContext'\nimport './editor.css'\n\n/**\n * Task Editor\n */\nexport const TaskEditor = () => {\n\n    const context = useContext(AppContext)\n    const [form, setForm] = useState()\n    const [isValid, setValid] = useState(false)\n\n    const task = context.task\n    useEffect(() => {\n        setForm(task)\n    }, [task])\n\n    function changeForm(changes, validation) {\n        setForm(Object.assign({}, form, changes))\n        setValid(validation)\n    }\n\n    async function save() {\n        console.log(task)\n        await context.updateTask(task.id, form)\n    }\n\n    if (!form) return (<div>vacio</div>)\n\n    return (\n        <div className=\"task-editor\">\n            <main>\n                <Form onChange={changeForm}>\n                    <TextField span=\"1\" id=\"description\" label=\"¿ Qué quieres hacer ?\" required value={form.description} />\n                </Form>\n            </main>\n            <footer>\n                <Button label=\"Guardar\" disabled={!isValid} action={save} />\n            </footer>\n        </div>\n    )\n}","import React, { Fragment, useContext, useEffect } from 'react'\nimport { SiteContext, Header, Text, DataTable, Button, Icon } from 'ywana-core6'\nimport { AppContext } from '../../AppContext'\nimport { CaptureDialog } from './dialogs/CaptureDialog'\nimport { TaskEditor } from './editor'\n\n/**\n * Inbox\n */\nconst Page = () => {\n\n    const site = useContext(SiteContext)\n    const context = useContext(AppContext)\n    useEffect(() => { context.loadTasks() }, [])\n\n    function capture() {\n        const onOK = form => context.createTask(form)\n        site.openDialog(<CaptureDialog onOK={onOK} />)\n    }\n\n    function select(row) {\n        context.selectTask(row.id)\n    }\n\n    async function remove(id) {\n        const accept = await site.confirm('Se va a Eliminar', \"¿ Estas seguro ?\")\n        if (accept === true) context.deleteTask(id)\n    }\n\n    const tasks = context.tasks\n        .filter(task => task.state === 'INBOX')\n        .map(task => {\n            task.action = <Icon icon=\"delete\" clickable action={() => remove(task.id)} />\n            return task\n        })\n\n    const data = {\n        columns: [\n            { id: 'description', label: 'Descripción' },\n            { id: 'action' }\n        ],\n        rows: tasks\n    }\n    const title = <Text use=\"headline6\">Bandeja</Text>\n    return (\n        <Fragment>\n            <Header icon={{ icon: 'inbox' }} title={title} >\n                <Button label=\"Capturar\" action={capture} raised />\n            </Header>\n            <main>\n                <DataTable {...data} onRowSelection={select} />\n            </main>\n            <aside>\n                <TaskEditor />\n            </aside>\n        </Fragment>\n    )\n}\n\nexport default Page","import React, { useState, useContext, useEffect } from 'react'\nimport { SiteContext, Field, Button } from 'ywana-core6'\nimport { AppContext } from '../../AppContext'\n\n/**\n * Login Page\n */\nconst Page = ({ user = \"\", pwd = \"\" }) => {\n\n    const site = useContext(SiteContext)\n    const context = useContext(AppContext)\n    const logged = context.logged\n    const [email, setEmail] = useState(user)\n    const [password, setPassword] = useState(pwd)\n\n    useEffect(() => { login() }, [])\n    useEffect(() => { if (logged) site.goto(\"INBOX\") }, [logged])\n\n    const login = () => {\n        context.login(email, password)\n    }\n \n    return (\n        <div>\n            <Field label=\"E-mail\" value={email} onChange={(id, value) => setEmail(value)} />\n            <Field label=\"Password\" value={password} onChange={(id, value) => setPassword(value)} />\n            <Button label=\"SIGN IN\" action={login} />\n        </div>\n    )\n}\n\nexport default Page","import React from 'react';\nimport { Site, Page } from 'ywana-core6'\nimport { AppContextProvider } from './AppContext'\nimport Inbox from './pages/inbox/page'\nimport Login from './pages/login/page'\n\n/**\n * Site\n */\nconst AppSite = () => {\n\n  const init = 'LOGIN'\n  \n  return (\n    <Site title=\"Ubikee GTD\" init={init} min>\n      <Page id=\"INBOX\" section=\"AGENT\" icon=\"inbox\" title=\"Bandeja\" layout=\"workspace\">\n        <Inbox />\n      </Page>\n      <Page id=\"LOGIN\" section=\"APP\" icon=\"exit_to_app\" layout=\"page\">\n            <Login landingPage=\"INBOX\" user=\"jeroldan@ywana.com\" pwd=\"12345678\"/>\n        </Page>\n    </Site>\n  )\n}\n\n/**\n * App\n */\nconst App = (props) => {\n  return (\n    <AppContextProvider>\n      <AppSite />\n    </AppContextProvider>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'ywana-core6/lib/css/html.css'\nimport 'ywana-core6/lib/css/theme.css'\nimport './index.css'\nimport './css/page.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}